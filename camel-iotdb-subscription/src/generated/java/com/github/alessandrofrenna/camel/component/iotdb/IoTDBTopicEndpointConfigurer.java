/* Generated by camel build tools - do NOT edit this file! */
package com.github.alessandrofrenna.camel.component.iotdb;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class IoTDBTopicEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        IoTDBTopicEndpoint target = (IoTDBTopicEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "action": target.getProducerCfg().setAction(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "consumerid":
        case "consumerId": target.getConsumerCfg().setConsumerId(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "groupid":
        case "groupId": target.getConsumerCfg().setGroupId(property(camelContext, java.lang.String.class, value)); return true;
        case "heartbeatintervalms":
        case "heartbeatIntervalMs": target.getConsumerCfg().setHeartbeatIntervalMs(property(camelContext, java.lang.Long.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "path": target.getProducerCfg().setPath(property(camelContext, java.lang.String.class, value)); return true;
        case "syncintervalms":
        case "syncIntervalMs": target.getConsumerCfg().setSyncIntervalMs(property(camelContext, java.lang.Long.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "action": return java.lang.String.class;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "consumerid":
        case "consumerId": return java.lang.String.class;
        case "exceptionhandler":
        case "exceptionHandler": return org.apache.camel.spi.ExceptionHandler.class;
        case "exchangepattern":
        case "exchangePattern": return org.apache.camel.ExchangePattern.class;
        case "groupid":
        case "groupId": return java.lang.String.class;
        case "heartbeatintervalms":
        case "heartbeatIntervalMs": return java.lang.Long.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "path": return java.lang.String.class;
        case "syncintervalms":
        case "syncIntervalMs": return java.lang.Long.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        IoTDBTopicEndpoint target = (IoTDBTopicEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "action": return target.getProducerCfg().getAction();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "consumerid":
        case "consumerId": return target.getConsumerCfg().getConsumerId();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "groupid":
        case "groupId": return target.getConsumerCfg().getGroupId();
        case "heartbeatintervalms":
        case "heartbeatIntervalMs": return target.getConsumerCfg().getHeartbeatIntervalMs();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "path": return target.getProducerCfg().getPath();
        case "syncintervalms":
        case "syncIntervalMs": return target.getConsumerCfg().getSyncIntervalMs();
        default: return null;
        }
    }
}

